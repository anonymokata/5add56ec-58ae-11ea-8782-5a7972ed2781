/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package wordsearchkata;

import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;

public class CrossWordTest {


    CrossWord crossWord;

    @Before
    public void setUp() {
        crossWord = new CrossWord();
    }


    //Horizontal Tests
    @Test public void shouldReturnJO() {

        assertEquals("JO: (0,10),(0,11)", crossWord.word("JO"));
    }

    @Test public void shouldReturnUYG() {

        assertEquals("UYG: (1,12),(1,13),(1,14)", crossWord.word("UYG"));
    }

    @Test public void shouldReturnXTG() {

        assertEquals("XTG: (2,12),(2,13),(2,14)", crossWord.word("XTG"));
    }

    @Test public void shouldReturnJOC() {

        assertEquals("JOC: (0,10),(0,11),(0,12)", crossWord.word("JOC"));
    }

    @Test public void shouldReturnJOCWE() {

        assertEquals("JOCWE: (0,10),(0,11),(0,12),(0,13),(0,14)", crossWord.word("JOCWE"));
    }

    @Test public void shouldReturnJVN() {

        assertEquals("JVN: (0,10),(0,9),(0,8)", crossWord.word("JVN"));
    }

    @Test public void shouldReturnKIN() {

        assertEquals("KIN: (0,6),(0,7),(0,8)", crossWord.word("KIN"));
    }

    @Test public void shouldReturnBRJS() {

        assertEquals("BRJS: (3,0),(3,1),(3,2),(3,3)", crossWord.word("BRJS"));
    }

    @Test public void shouldReturnZZ() {

        assertEquals("ZZ: (1,5),(1,6)", crossWord.word("ZZ"));
    }

    @Test public void shouldReturnXT() {

        assertEquals("XT: (2,12),(2,13)", crossWord.word("XT"));
    }

    @Test public void shouldReturnETIK() {

        assertEquals("ETIK: (3,7),(3,8),(3,9),(3,10)", crossWord.word("ETIK"));
    }

    @Test public void shouldReturnLLSH() {

        assertEquals("LLSH: (1,0),(1,1),(1,2),(1,3)", crossWord.word("LLSH"));
    }

    @Test public void shouldReturnCOTTYK() {

        assertEquals("COTTYK: (5,1),(5,2),(5,3),(5,4),(5,5),(5,6)", crossWord.word("COTTYK"));
    }

    @Test public void shouldReturnSCOTTY() {

        assertEquals("SCOTTY: (5,0),(5,1),(5,2),(5,3),(5,4),(5,5)", crossWord.word("SCOTTY"));
    }

    @Test public void shouldReturnKEAB() {

        assertEquals("KEAB: (14,11),(14,12),(14,13),(14,14)", crossWord.word("KEAB"));
    }

    @Test public void shouldReturnBAEK() {

        assertEquals("BAEK: (14,14),(14,13),(14,12),(14,11)", crossWord.word("BAEK"));
    }

    //Vertical Test
    @Test public void shouldReturnMLSR() {

        assertEquals("MLSR: (0,1),(1,1),(2,1),(3,1)", crossWord.word("MLSR"));
    }

    @Test public void shouldReturnCIYT() {

        assertEquals("CIYT: (14,10),(13,10),(12,10),(11,10)", crossWord.word("CIYT"));
    }

    @Test public void shouldReturnKHSB() {

        assertEquals("KHSB: (11,14),(12,14),(13,14),(14,14)", crossWord.word("KHSB"));
    }

    //DiagonalDesc Test
    @Test public void shouldReturnHJEI() {

        assertEquals("HJEI: (1,3),(2,4),(3,5),(4,6)", crossWord.word("HJEI"));
    }

    @Test public void shouldReturnHIDW() {

        assertEquals("HIDW: (4,10),(3,9),(2,8),(1,7)", crossWord.word("HIDW"));
    }

    //DiagonalAsc Test

}



