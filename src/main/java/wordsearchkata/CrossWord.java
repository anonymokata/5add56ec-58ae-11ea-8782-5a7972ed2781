/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package wordsearchkata;

import java.io.*;
import java.util.Arrays;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.io.BufferedReader;
import java.io.FileReader;



public class CrossWord {
    public String word(String inputWord) {
        String[] wordList = null; //Array of words
        String[][] allWords = null; //Crossword in Array
        String[] lineArray = null;
        String nextLine = null;
        int[] firstLoc = new int[2];
        String otherLocs = "";
        int numLines = 0;
        int locX = 0;
        int locY = 0;


        // This is the pulling of the text file and population of the wordList and actual crossword.
        String filePath = "/Users/labateje/wordsearchkata/src/main/java/wordsearchkata/WordList";

        try {
            BufferedReader lineReader = new BufferedReader(new FileReader(filePath));
            String firstLine = lineReader.readLine();
            wordList = firstLine.split(","); // The list of words

            while (lineReader.readLine() != null){
                numLines++;
            }

            allWords = new String[numLines][numLines];


            for(int i=1;i<=numLines;i++) {
                nextLine = Files.readAllLines(Paths.get("/Users/labateje/tddwordsearch/src/main/java/tddwordsearch/WordList")).get(i);
                lineArray = nextLine.split(",");
                for(int j=0;j<numLines;j++) {
                    allWords[i-1][j] = lineArray[j]; // The actual crossword
                }
            }




            lineReader.close();
        } catch (IOException ex) {
            System.err.println(ex);
        }

        // This is the start of the actual search.
        String[] outPut = new String[inputWord.length()];
        firstLoc = firstLetter(allWords, numLines, inputWord);
        locX = firstLoc[0];
        locY = firstLoc[1];
        //System.out.printf("%s\n", inputWord.substring(0, 1));
        //System.out.printf("(%s,%s)\n", locX, locY);
        outPut[0] = "("+locX+","+locY+")";

        otherLocs = searchHorizontally(allWords, numLines, inputWord, locX, locY);
        //outPut[1] = otherLocs;

        //String outPutString = String.join(",", outPut);
        String outPutString = outPut[0] + otherLocs;
        System.out.printf("%s: %s\n", inputWord, outPutString);

        return outPutString;
    }


    public int[] firstLetter(String[][] allWords, int numLines, String inputWord){
        int[] firstLoc = new int[2];
        outerloop:
        for (int l = 0; l < numLines; l++) {
            for (int r = 0; r < numLines; r++) {
                if (allWords[l][r].equals(inputWord.substring(0, 1))) {
                    //System.out.printf("(%s,%s)\n", l, r);
                    firstLoc[0] = l;
                    firstLoc[1] = r;
                    break outerloop;
                }
            }
        }
        return firstLoc;
    }

    public String searchHorizontally(String[][] allWords, int numLines, String inputWord, int firstX, int firstY){
        int locX = 0;
        int locY = 0;
        String outPut = "";

        //for(int i = 1; i < inputWord.length();i++){

       // }
        //Forward
        for(int i = 1; i < inputWord.length();i++){
            if(allWords[firstX][firstY+i].equals(inputWord.substring(i, i+1))){
                System.out.printf("(%s,%s)\n", firstX, firstY+i);
                outPut += inputWord.substring(i, i+1);

            }
        }
        return outPut;
    }




}
